<Window x:Class="AnnMariya.Pages.InsuranceWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:AnnMariya.Pages"
        mc:Ignorable="d"
        Title="InsuranceWindow" Height="450" Width="800">
    <Grid Margin="10">
        <!-- Insurance Section -->
        <GroupBox Header="Insurance Details" Margin="5">
            <Grid>
                <DataGrid x:Name="InsuranceDataGrid" ItemsSource="{Binding InsuranceRecords}" AutoGenerateColumns="False" 
                          SelectedItem="{Binding SelectedInsurance}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="300">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Insurance ID" Binding="{Binding InsuranceID}" Width="100"/>
                        <DataGridTextColumn Header="Patient ID" Binding="{Binding PatientID}" Width="100"/>
                        <DataGridTextColumn Header="Insurance Provider" Binding="{Binding InsuranceProvider}" Width="200"/>
                        <DataGridTextColumn Header="Policy Number" Binding="{Binding PolicyNumber}" Width="200"/>
                        <DataGridTextColumn Header="Expiration Date" Binding="{Binding ExpirationDate, StringFormat=dd/MM/yyyy}" Width="150"/>
                    </DataGrid.Columns>
                </DataGrid>

                <!-- Insurance Buttons -->
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="10">
                    <Button Content="Add Insurance" Command="{Binding AddInsuranceCommand}" Width="120" Margin="5"/>
                    <Button Content="Edit Insurance" Command="{Binding EditInsuranceCommand}" Width="120" Margin="5" IsEnabled="{Binding IsInsuranceSelected}"/>
                    <Button Content="Delete Insurance" Command="{Binding DeleteInsuranceCommand}" Width="120" Margin="5" IsEnabled="{Binding IsInsuranceSelected}"/>
                </StackPanel>
            </Grid>
        </GroupBox>
    </Grid>
</Window>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using AnnMariya.ViewModels;

namespace AnnMariya.Pages
{
    /// <summary>
    /// Interaction logic for InsuranceWindow.xaml
    /// </summary>
    public partial class InsuranceWindow : Window
    {
        public InsuranceWindow()
        {
            InitializeComponent();
            this.DataContext = new InsuranceViewModel();
        }
    }
}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Data;

namespace AnnMariya.Repo
{
    public interface IInsuranceRepo
    {
        List<Insurance> ReadAll();
        Insurance ReadById(int id);
        void Create(Insurance insurance);
        void Update(Insurance insurance);
        void Delete(int insuranceId);
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AnnMariya.Repo;

namespace AnnMariya.EFRepo
{
    public class EFInsuranceRepo : IInsuranceRepo
    {
        private readonly EHRMSDbEntities _context;

        public InsuranceRepo(EHRMSDbEntities context)
        {
            _context = context;
        }

        public List<Insurance> ReadAll()
        {
            return _context.Insurances.ToList();
        }

        public Insurance ReadById(int insuranceId)
        {
            return _context.Insurances.FirstOrDefault(i => i.InsuranceID == insuranceId);
        }

        public void Create(Insurance insurance)
        {
            _context.Insurances.Add(insurance);
            _context.SaveChanges();
        }

        public void Update(Insurance insurance)
        {
            var existingInsurance = _context.Insurances.FirstOrDefault(i => i.InsuranceID == insurance.InsuranceID);
            if (existingInsurance != null)
            {
                existingInsurance.InsuranceProvider = insurance.InsuranceProvider;
                existingInsurance.PolicyNumber = insurance.PolicyNumber;
                existingInsurance.ExpirationDate = insurance.ExpirationDate;
                _context.SaveChanges();
            }
        }

        public void Delete(int insuranceId)
        {
            var insurance = _context.Insurances.FirstOrDefault(i => i.InsuranceID == insuranceId);
            if (insurance != null)
            {
                _context.Insurances.Remove(insurance);
                _context.SaveChanges();
            }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AnnMariya.Commands;
using System.Windows.Input;

namespace AnnMariya.ViewModels
{
    public class InsuranceViewModel : ViewModelBase
    {
        private ObservableCollection<Insurance> _insuranceRecords;
        private Insurance _selectedInsurance;

        public ObservableCollection<Insurance> InsuranceRecords
        {
            get { return _insuranceRecords; }
            set { _insuranceRecords = value; OnPropertyChanged(nameof(InsuranceRecords)); }
        }

        public Insurance SelectedInsurance
        {
            get { return _selectedInsurance; }
            set { _selectedInsurance = value; OnPropertyChanged(nameof(SelectedInsurance)); }
        }

        public ICommand AddInsuranceCommand { get; }
        public ICommand EditInsuranceCommand { get; }
        public ICommand DeleteInsuranceCommand { get; }

        public bool IsInsuranceSelected => SelectedInsurance != null;

        public InsuranceViewModel()
        {
            // Assuming you have an EF context or other data source
            InsuranceRecords = new ObservableCollection<Insurance>(/*Load from database*/);

            AddInsuranceCommand = new RelayCommand(AddInsurance);
            EditInsuranceCommand = new RelayCommand(EditInsurance, () => IsInsuranceSelected);
            DeleteInsuranceCommand = new RelayCommand(DeleteInsurance, () => IsInsuranceSelected);
        }

        private void AddInsurance()
        {
            var newInsurance = new Insurance
            {
                // Add new insurance details (mocked here)
                PatientID = 1, // Replace with actual data
                InsuranceProvider = "ABC Insurance",
                PolicyNumber = "XYZ123456",
                ExpirationDate = DateTime.Now.AddYears(1)
            };

            // Add to database
            InsuranceRecords.Add(newInsurance);
            // Save changes to the database here
        }

        private void EditInsurance()
        {
            if (SelectedInsurance != null)
            {
                // Edit insurance logic
                SelectedInsurance.InsuranceProvider = "XYZ Insurance";
                // Save changes to the database
            }
        }

        private void DeleteInsurance()
        {
            if (SelectedInsurance != null)
            {
                // Remove from collection
                InsuranceRecords.Remove(SelectedInsurance);
                // Delete from the database
            }
        }
    }
}
