// ViewModels/PatientViewModel.cs
using System;
using System.Collections.ObjectModel;
using PatientApp.Models;

namespace PatientApp.ViewModels
{
    public class PatientViewModel
    {
        public ObservableCollection<Patient> Patients { get; private set; }
        public ObservableCollection<Patient> ConfirmedPatients { get; private set; }

        public event EventHandler<Patient> PatientRegistered;
        public event EventHandler<Patient> AppointmentConfirmed;
        public event EventHandler NavigateToAppointmentConfirmation;
        public event EventHandler NavigateToPatientDashboard;

        public PatientViewModel()
        {
            Patients = new ObservableCollection<Patient>();
            ConfirmedPatients = new ObservableCollection<Patient>();
        }

        public void RegisterPatient(Patient patient)
        {
            Patients.Add(patient);
            PatientRegistered?.Invoke(this, patient);
        }

        public void ConfirmPatient(Patient patient)
        {
            ConfirmedPatients.Add(patient);
            Patients.Remove(patient);
            AppointmentConfirmed?.Invoke(this, patient);
        }

        public void NavigateToConfirmation()
        {
            NavigateToAppointmentConfirmation?.Invoke(this, EventArgs.Empty);
        }

        public void NavigateToDashboard()
        {
            NavigateToPatientDashboard?.Invoke(this, EventArgs.Empty);
        }
    }
}



// ViewModels/AppointmentConfirmationViewModel.cs
using System;
using System.Collections.ObjectModel;
using PatientApp.Models;

namespace PatientApp.ViewModels
{
    public class AppointmentConfirmationViewModel
    {
        private readonly PatientViewModel _patientViewModel;

        public ObservableCollection<Patient> Patients => _patientViewModel.Patients;

        public event EventHandler<Patient> AppointmentConfirmed;

        public AppointmentConfirmationViewModel(PatientViewModel patientViewModel)
        {
            _patientViewModel = patientViewModel;
        }

        public void ConfirmPatient(Patient patient)
        {
            _patientViewModel.ConfirmPatient(patient);
            AppointmentConfirmed?.Invoke(this, patient);
        }
    }
}




// ViewModels/PatientDashboardViewModel.cs
using System.Collections.ObjectModel;
using PatientApp.Models;

namespace PatientApp.ViewModels
{
    public class PatientDashboardViewModel
    {
        private readonly PatientViewModel _patientViewModel;

        public ObservableCollection<Patient> ConfirmedPatients => _patientViewModel.ConfirmedPatients;

        public PatientDashboardViewModel(PatientViewModel patientViewModel)
        {
            _patientViewModel = patientViewModel;
        }
    }
}



<!-- MainWindow.xaml -->
<Window x:Class="PatientApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:PatientApp"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <StackPanel>
            <TextBlock Text="Patient Management System" FontSize="24" FontWeight="Bold" Margin="0,0,0,20"/>
            <Button Content="Register Patient" Command="{Binding RegisterPatientCommand}" Width="150" Margin="10"/>
            <Button Content="Appointment Confirmation" Command="{Binding NavigateToConfirmationCommand}" Width="150" Margin="10"/>
            <Button Content="Patient Dashboard" Command="{Binding NavigateToDashboardCommand}" Width="150" Margin="10"/>
            <ContentControl Content="{Binding CurrentView}" />
        </StackPanel>
    </Grid>
</Window>



// ViewModels/MainWindowViewModel.cs
using System;
using System.Windows.Input;
using PatientApp.Models;
using PatientApp.Views;

namespace PatientApp.ViewModels
{
    public class MainWindowViewModel
    {
        private readonly PatientViewModel _patientViewModel;

        public ICommand RegisterPatientCommand { get; }
        public ICommand NavigateToConfirmationCommand { get; }
        public ICommand NavigateToDashboardCommand { get; }

        public object CurrentView { get; set; }

        public MainWindowViewModel(PatientViewModel patientViewModel)
        {
            _patientViewModel = patientViewModel;

            RegisterPatientCommand = new RelayCommand(OnRegisterPatient);
            NavigateToConfirmationCommand = new RelayCommand(OnNavigateToConfirmation);
            NavigateToDashboardCommand = new RelayCommand(OnNavigateToDashboard);

            _patientViewModel.NavigateToAppointmentConfirmation += OnNavigateToConfirmationView;
            _patientViewModel.NavigateToPatientDashboard += OnNavigateToDashboardView;
        }

        private void OnRegisterPatient()
        {
            CurrentView = new PatientRegControl(_patientViewModel);
        }

        private void OnNavigateToConfirmation()
        {
            CurrentView = new AppointmentConfirmationControl(new AppointmentConfirmationViewModel(_patientViewModel));
        }

        private void OnNavigateToDashboard()
        {
            CurrentView = new PatientDashboardControl(new PatientDashboardViewModel(_patientViewModel));
        }

        private void OnNavigateToConfirmationView(object sender, EventArgs e)
        {
            OnNavigateToConfirmation();
        }

        private void OnNavigateToDashboardView(object sender, EventArgs e)
        {
            OnNavigateToDashboard();
        }
    }
}




// Helpers/RelayCommand.cs
using System;
using System.Windows.Input;

namespace PatientApp.Helpers
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;

        public RelayCommand(Action execute)
        {
            _execute = execute;
        }

        public event EventHandler CanExecuteChanged;

        public bool CanExecute(object parameter) => true;

        public void Execute(object parameter) => _execute();
    }
}
